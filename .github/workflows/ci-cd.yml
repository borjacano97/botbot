name: CI/CD Pipeline


on:
  push:
    branches:
      - master  # Ejecutar el pipeline cuando haya un push a la rama master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t discord-bot .

      - name: Save Docker image
        run: docker save discord-bot | gzip > discord-bot.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: discord-bot.tar.gz

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: discord-bot.tar.gz

      - name: Deploy to remote server with Docker Compose
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          # Copiar el artefacto al servidor remoto
          scp -o StrictHostKeyChecking=no discord-bot.tar.gz $SSH_USER@$SSH_HOST:/tmp

          # Conectar al servidor remoto y realizar el despliegue
          ssh -i $SSH_KEY $SSH_USER@$SSH_HOST << 'EOF'
          cd ~/projects/botbot
          
          # Actualizar el cÃ³digo desde el repositorio remoto
          git reset --hard
          git pull origin master
          
          # Extraer la imagen Docker
          docker load < /tmp/discord-bot.tar.gz

          # Actualizar servicios con Docker Compose
          docker-compose down || true
          docker-compose up --build -d
          EOF

